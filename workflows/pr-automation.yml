name: CI/CD Pipeline - Vue Frontend

# Trigger on push to dev or main branch
on:
  push:
    branches:
      - dev
      - release
  workflow_dispatch:  # Allow manual trigger

# Permissions for GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write

# Environment variables
env:
  JENKINS_WEBHOOK_URL: ${{ secrets.JENKINS_WEBHOOK_URL }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  # Auto create PR from dev to main
  auto-pr-dev-to-main:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get commit information
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request from dev to main
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: dev
          base: release
          title: "🚀 [Auto PR] Deploy dev to release"
          body: |
            ## 📦 자동 생성된 배포 PR
            
            **Dev 브랜치의 변경사항을 Main으로 배포합니다.**
            
            ### 📝 최근 커밋 정보
            - **Author**: ${{ steps.commit_info.outputs.commit_author }}
            - **Message**: ${{ steps.commit_info.outputs.commit_message }}
            - **Branch**: dev → main
            
            ### ✅ 배포 전 체크리스트
            - [ ] 코드 리뷰 완료
            - [ ] 테스트 통과 확인
            - [ ] 배포 준비 완료
            
            ### 🔄 배포 프로세스
            이 PR이 merge되면 Jenkins를 통해 자동으로 운영 서버에 배포됩니다.
            
            ---
            *이 PR은 dev 브랜치 push 시 자동으로 생성되었습니다.*
          labels: |
            auto-pr
            deployment
          draft: false
      
      - name: PR Creation Summary
        run: |
          echo "## 🎯 PR 자동 생성 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: dev → main" >> $GITHUB_STEP_SUMMARY
          echo "**Author**: ${{ steps.commit_info.outputs.commit_author }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message**: ${{ steps.commit_info.outputs.commit_message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 다음 단계" >> $GITHUB_STEP_SUMMARY
          echo "1. PR 리뷰 및 승인" >> $GITHUB_STEP_SUMMARY
          echo "2. Main 브랜치로 merge" >> $GITHUB_STEP_SUMMARY
          echo "3. Jenkins 자동 배포 실행" >> $GITHUB_STEP_SUMMARY
  
  # Notify Jenkins on main branch push
  notify-jenkins:
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get commit information
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
      
      - name: Notify Jenkins for deployment
        uses: actions/github-script@v7
        with:
          script: |
            const payload = {
              ref: 'main',
              commits: [{
                id: '${{ steps.commit_info.outputs.commit_sha }}',
                message: `${{ steps.commit_info.outputs.commit_message }}`,
                author: {
                  name: '${{ steps.commit_info.outputs.commit_author }}'
                },
                timestamp: new Date().toISOString()
              }],
              repository: {
                name: context.repo.repo,
                full_name: context.repo.owner + '/' + context.repo.repo
              }
            };
            
            console.log('🚀 Vue Frontend deployment triggered');
            console.log('📦 Commit:', payload.commits[0].id.substring(0, 7));
            console.log('👤 Author:', payload.commits[0].author.name);
            console.log('📝 Message:', payload.commits[0].message);
            
            // Jenkins webhook URL - 팀 서버 Jenkins
            const jenkinsUrl = process.env.JENKINS_WEBHOOK_URL;
            
            try {
              const response = await fetch(jenkinsUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-GitHub-Event': 'push'
                },
                body: JSON.stringify(payload)
              });
              
              if (response.ok) {
                console.log('✅ Jenkins notification sent successfully');
              } else {
                console.log('⚠️ Jenkins notification failed:', response.status, response.statusText);
              }
            } catch (error) {
              console.log('❌ Failed to notify Jenkins:', error.message);
              console.log('📋 Manual deployment info:');
              console.log('- Repository:', context.repo.owner + '/' + context.repo.repo);
              console.log('- Branch: main');
              console.log('- Commit:', payload.commits[0].id);
            }
      
      - name: Deployment Summary
        run: |
          echo "## 🚀 Vue Frontend Deployment Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ steps.commit_info.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author**: ${{ steps.commit_info.outputs.commit_author }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message**: ${{ steps.commit_info.outputs.commit_message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Jenkins will build Docker image" >> $GITHUB_STEP_SUMMARY
          echo "2. Push to DockerHub" >> $GITHUB_STEP_SUMMARY
          echo "3. Deploy to production server" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: 팀 서버 (Production)" >> $GITHUB_STEP_SUMMARY
          echo "**Service**: Vue Frontend (Port 7001)" >> $GITHUB_STEP_SUMMARY

